name: Build and deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
      - monorepo
env:
  IMAGE: docker.pkg.github.com/${{ github.repository }}/dp-faktasider-frontend:${{ github.sha }}
  IMAGE_CACHE_RUNTIME: docker.pkg.github.com/${{ github.repository }}/dp-faktasider-frontend-cache-runtime
  IMAGE_CACHE_BUILDER: docker.pkg.github.com/${{ github.repository }}/dp-faktasider-frontend-cache-builder
jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Test
        env:
          TZ: Europe/Oslo
        run: |
          npm install --no-save --no-audit
          npm test
          npm run typeCheck

  build:
    name: Build and publish Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build docker image with cache
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker pull ${{ env.IMAGE_CACHE_BUILDER }} || true
          docker pull ${{ env.IMAGE_CACHE_RUNTIME }} || true
          docker build . -t ${{ env.IMAGE }}  \
            --cache-from=${{ env.IMAGE_CACHE_BUILDER }},${{ env.IMAGE_CACHE_RUNTIME }} \
            --build-arg BUILDKIT_INLINE_CACHE=1
          docker push ${{ env.IMAGE }}

      - name: Archive NAIS yaml
        uses: actions/upload-artifact@v1
        with:
          name: nais-yaml
          path: nais

  update-docker-cache:
    name: Update Docker Cache
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker pull ${{ env.IMAGE_CACHE_BUILDER }} || true
          docker build . -t ${{ env.IMAGE_CACHE_BUILDER }} --target builder --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from=${{ env.IMAGE_CACHE_BUILDER }}
          docker push ${{ env.IMAGE_CACHE_BUILDER }}
          docker pull ${{ env.IMAGE_CACHE_RUNTIME }} || true
          docker build . -t ${{ env.IMAGE_CACHE_RUNTIME }} --target runtime --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from=${{ env.IMAGE_CACHE_RUNTIME }}
          docker push ${{ env.IMAGE_CACHE_RUNTIME }}

  deploy-dev:
    name: Deploy to dev
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch NAIS yaml
        uses: actions/download-artifact@v1
        with:
          name: nais-yaml
          path: nais

      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-sbs
          RESOURCE: nais/nais.yaml
          VARS: nais/dev/vars.yaml
          PRINT_PAYLOAD: true

  deploy-dev-gcp:
    name: Deploy to dev gcp
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch NAIS yaml
        uses: actions/download-artifact@v1
        with:
          name: nais-yaml
          path: nais

      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: nais/nais.yaml
          VARS: nais/dev-gcp/vars.yaml
          PRINT_PAYLOAD: true

  deploy-prod:
    name: Deploy to Production
    needs: [ deploy-dev, test ]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Fetch NAIS yaml
        uses: actions/download-artifact@v1
        with:
          name: nais-yaml
          path: nais

      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-sbs
          RESOURCE: nais/nais.yaml
          VARS: nais/prod/vars.yaml
          PRINT_PAYLOAD: true
